{
  "clause_name": "RELATION",
  "methods": [
    {
      "name": "related",
      "docstring_summary": "Concatenate an undirectional (i.e. --) graph Relationship, which may be filtered.",
      "args": {
        "labels": {
          "type": "Union[str, List[str]]",
          "default": "None",
          "description": "The relationship labels(type or types) in the DB"
        },
        "ref_name": {
          "type": "str",
          "default": "None",
          "description": "A reference name to be used later in the rest of the query"
        },
        "properties": {
          "type": "dict",
          "default": "None",
          "description": "A dict representing the set of properties by which the relationship is filtered"
        },
        "min_hops": {
          "type": "int",
          "description": "The minimal desired number of hops (set -1 for maximum boundary only)",
          "default": "1"
        },
        "max_hops": {
          "type": "int",
          "description": "The maximal desired number of hops (set -1 for minimal boundary only)",
          "default": "1"
        },
        "shortest": {
          "type": "Union[bool, str]",
          "description": "Whether to add the SHORTEST flag to a recursive relationship. Requires min_hops | max_hops. Can be True/'shortest' for SHORTEST, or 'all' for ALL SHORTEST",
          "default": "False"
        },
        "**kwargs": {
          "description": "kwargs"
        }
      }
    },
    {
      "name": "related_to",
      "docstring_summary": "Concatenate a forward (i.e. -->) graph Relationship, which may be filtered.",
      "args": {
        "labels": {
          "type": "Union[str, List[str]]",
          "default": "None",
          "description": "The relationship labels(type or types) in the DB"
        },
        "ref_name": {
          "type": "str",
          "default": "None",
          "description": "A reference name to be used later in the rest of the query"
        },
        "properties": {
          "type": "dict",
          "default": "{}",
          "description": "A dict representing the set of properties by which the relationship is filtered"
        },
        "min_hops": {
          "type": "int",
          "description": "The minimal desired number of hops (set -1 for maximum boundary only)",
          "default": "1"
        },
        "max_hops": {
          "type": "int",
          "description": "The maximal desired number of hops (set -1 for minimal boundary only)",
          "default": "1"
        },
        "shortest": {
          "type": "Union[bool, str]",
          "description": "Whether to add the SHORTEST flag to a recursive relationship. Requires min_hops | max_hops. Can be True/'shortest' for SHORTEST, or 'all' for ALL SHORTEST",
          "default": "False"
        },
        "**kwargs": {
          "description": "kwargs"
        }
      }
    },
    {
      "name": "related_from",
      "docstring_summary": "Concatenate a backward (i.e. <--) graph Relationship, which may be filtered.",
      "args": {
        "labels": {
          "type": "Union[str, List[str]]",
          "default": "None",
          "description": "The relationship labels(type or types) in the DB"
        },
        "ref_name": {
          "type": "str",
          "default": "None",
          "description": "A reference name to be used later in the rest of the query"
        },
        "properties": {
          "type": "dict",
          "default": "{}",
          "description": "A dict representing the set of properties by which the relationship is filtered"
        },
        "min_hops": {
          "type": "int",
          "description": "The minimal desired number of hops (set -1 for maximum boundary only)",
          "default": "1"
        },
        "max_hops": {
          "type": "int",
          "description": "The maximal desired number of hops (set -1 for minimal boundary only)",
          "default": "1"
        },
        "shortest": {
          "type": "Union[bool, str]",
          "description": "Whether to add the SHORTEST flag to a recursive relationship. Requires min_hops | max_hops. Can be True/'shortest' for SHORTEST, or 'all' for ALL SHORTEST",
          "default": "False"
        },
        "**kwargs": {
          "description": "kwargs"
        }
      }
    },
    {
      "name": "_directed_relation",
      "docstring_summary": "Concatenate a graph Relationship (private method).",
      "args": {
        "direction": {
          "type": "str",
          "description": "The relationship direction, can one of 'forward', 'backward' - otherwise unidirectional"
        },
        "labels": {
          "type": "Union[str, List[str]]",
          "description": "The relationship labels(type or types) in the DB"
        },
        "ref_name": {
          "type": "str",
          "default": "None",
          "description": "A reference name to be used later in the rest of the query"
        },
        "properties": {
          "type": "dict",
          "default": "{}",
          "description": "A dict representing the set of properties by which the relationship is filtered"
        },
        "min_hops": {
          "type": "int",
          "description": "The minimal desired number of hops (set -1 for maximum boundary only)",
          "default": "1"
        },
        "max_hops": {
          "type": "int",
          "description": "The maximal desired number of hops (set -1 for minimal boundary only)",
          "default": "1"
        },
        "shortest": {
          "type": "Union[bool, str]",
          "description": "Whether to add the SHORTEST flag to a recursive relationship. Requires min_hops | max_hops. Can be True/'shortest' for SHORTEST, or 'all' for ALL SHORTEST",
          "default": "False"
        },
        "**kwargs": {
          "description": "kwargs"
        }
      }
    }
  ],
  "successors": [
    "Node"
  ] 
}